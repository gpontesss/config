#!/bin/bash

## usage: ytq <command> [<args>]
##
## commands:
##   daemon     Starts the daemon. It consumes queue requests and schedules
##              tasks to download files.
##   add        Adds an URL to the download queue.

# function:
# + queue add
# + queue remove?
# + queue status
# + daemon (ran when system init)
# + clean
#
# general stuff:
# + notifications
# + text config
# + specify only audio/both video and audio

set -o errexit

# TODO: make it configurable
DL_DIR="/ext/media/ytq"
LOCK="$DL_DIR/daemon.lock"

# uses its own socket to not mess up other task queues.
export TS_SOCKET="/var/tmp/ytq.tsp.sock"

usage() {
    [[ -n "$1" ]] && echo -e "$1\n"
    sed -E -ne 's/^## ?(.*)/\1/p' $0
}

createifinexistent() {
    local file="$1"
    if [[ ! -e "$file" ]]; then
        echo "Creating '$file'"
        touch "$file"
    fi
}

if [[ ! -d "$DL_DIR" ]]; then
    echo "Creating '$DL_DIR'"
    mkdir -p "$DL_DIR"
fi

PENDING="$DL_DIR/pending"; createifinexistent "$PENDING"
COMPLETED="$DL_DIR/completed"; createifinexistent "$COMPLETED"

add() {
    local LABEL="$1"; local URL="$2"
    if [[ -z "$LABEL" ]]; then
        usage "Label cannot be empty"
    elif [[ -z "$URL" ]]; then
        usage "URL cannot be empty"
    elif echo "$LABEL" | grep -Pq "\t"; then
       echo "Label cannot contain tabs"
    elif grep -Pq "^$LABEL\t" <(cat "$COMPLETED" "$PENDING"); then
        echo "Label '$LABEL' was used already"
    elif grep -q "$URL$" "$COMPLETED"; then
        echo "'$URL' was downloaded already"
    elif grep -q "$URL$" "$PENDING"; then
        echo "'$URL' was queued already"
    else
        echo -e "$LABEL\t$URL" >> "$PENDING"
        echo "Added '$LABEL' ($URL) to pending queue"
        exit 0
    fi
    exit -1
}

reset() {
    echo -n > "$PENDING"
    echo -n > "$COMPLETED"
}

daemon() {
    [[ "$#" -ne 0 ]] && usage "Daemon takes no arguments"

    if (set -o noclobber; echo "$$" > "$LOCK") 2> /dev/null; then
        trap "rm -f '$LOCK'; tsp -K; exit $?" INT TERM EXIT

        # initially updates pending to discard completed.
        comm -23 <(sort "$PENDING") <(sort "$COMPLETED") | sponge "$PENDING"

        echo "Starting daemon..."
        tail -f "$PENDING" \
        | while read LABEL URL; do
            notify-send "Queueing video" "Queueing '$LABEL' video download..."
            idnum="$( \
                tsp -L "$LABEL" youtube-dl \
                    --add-metadata \
                    --ignore-errors \
                    --continue \
                    --output "$DL_DIR/files/%(title)s.%(ext)s" \
                    "$URL" \
            )"
            (tsp -D "$idnum" bash -c \
                "echo '$LABEL\t$URL' >> '$COMPLETED'") > /dev/null
            (tsp -D "$idnum" notify-send \
                "Download completed" \
                "Video $URL download successfully completed!") > /dev/null

            echo "Enqueued '$LABEL' ($URL) operations"
        done

        rm -f "$LOCK"
        tsk -K
        trap - INT TERM EXIT
    else
        echo "There's a daemon instance of ytq running already."
    fi
}

case "$1" in
    daemon) shift; daemon "$@" ;;
    add) shift; add "$@" ;;
    reset) reset ;;
    status) usage "Not implemented yet :(" ;;
    tsp) shift; tsp "$@" ;;
    *) usage "Unknown command '$1'"; exit -1 ;;
esac
