#!/bin/bash

## usage: ytq <command> [<args>]
##
## commands:
##   daemon     Starts the daemon. It consumes queue requests and schedules
##              tasks to download files.
##   add        Adds an URL to the download queue.

# function:
# + queue add
# + queue remove?
# + queue status
# + daemon (ran when system init)
# + clean
#
# general stuff:
# + notifications
# + text config
# + specify only audio/both video and audio

set -o errexit

# TODO: make it configurable
DL_DIR="/ext/media/ytq"
PROGRESS_DIR="$DL_DIR/progress"
DONE_DIR="$DL_DIR/done"
LOCK="$DL_DIR/daemon.lock"

# uses its own socket to not mess up other task queues.
export TS_SOCKET="/var/tmp/ytq.tsp.sock"

usage() {
    if [[ -n "$1" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)\n"
    fi
    sed -E -ne 's/^## ?(.*)/\1/p' $0
}

createifinexistent() {
    local file="$1"
    if [[ ! -e "$file" ]]; then
        echo "Creating '$file'"
        touch "$file"
    fi
}

# TODO: move conditional creation to top
mkdir -p "$DL_DIR" "$PROGRESS_DIR" "$DONE_DIR"

PENDING="$DL_DIR/pending.dls"; createifinexistent "$PENDING"
COMPLETED="$DL_DIR/completed.dls"; createifinexistent "$COMPLETED"

add() {
    local LABEL="$1"; local URL="$2"
    if [[ -z "$LABEL" ]]; then
        usage "Label cannot be empty"
    elif [[ -z "$URL" ]]; then
        usage "URL cannot be empty"
    elif echo "$LABEL" | grep -Pq "\t"; then
       echo "Label cannot contain tabs"
    elif grep -Pq "^$LABEL\t" <(cat "$COMPLETED" "$PENDING"); then
        echo "Label '$LABEL' was used already"
    elif grep -q "$URL$" "$COMPLETED"; then
        echo "'$URL' was downloaded already"
    elif grep -q "$URL$" "$PENDING"; then
        echo "'$URL' was queued already"
    else
        echo -e "$LABEL\t$URL" >> "$PENDING"
        echo "Added '$LABEL' ($URL) to pending queue"
        exit 0
    fi
    exit -1
}

reset() {
    echo -n > "$PENDING"
    echo -n > "$COMPLETED"
}

# TODO: fail if daemon is not running
logs() {
    [[ ("$#" -ne 1) || (-z "$1") ]] && usage "Label is required" && exit -1
    LABEL=$1

    local OUTFILE="$(
        tsp \
        | grep "$LABEL.download" \
        | sed -E "s/\s+/ /g" \
        | cut -d' ' -f3)"
    tail -n+1 -f "$OUTFILE"
}

daemon() {
    [[ "$#" -ne 0 ]] && usage "Daemon takes no arguments"

    if (set -o noclobber; echo "$$" > "$LOCK") 2> /dev/null; then
        trap "rm -f '$LOCK'; tsp -K; exit $?" INT TERM EXIT

        # initially updates pending to discard completed.
        comm -23 <(sort "$PENDING") <(sort "$COMPLETED") | sponge "$PENDING"

        echo "Starting daemon..."
        tail -f "$PENDING" \
        | while read LABEL URL; do
        # TODO: PUZZLE: how to get status from completed/pending when queueing
        # a playlist.
            notify-send "Queueing video" "Queueing '$LABEL' video download..."
            # idnum="$(tsp -L "$LABEL.metadata" \
            #     youtube-dl \
            #     --output "$DL_DIR/metadata/$LABEL.$URL" \
            #     --write-info-json \
            #     --write-annotations \
            #     --skip-download \
            #     $URL
            # )"
            idnum="$(tsp -L "$LABEL.download" youtube-dl \
                --add-metadata \
                --ignore-errors \
                --continue \
                --output "$PROGRESS_DIR/$LABEL.%(title)s.%(ext)s" \
                "$URL"
            )" > /dev/null
            (tsp -D "$idnum" -L "$LABEL.move-done" \
                bash -c \
                "mv '$PROGRESS_DIR/$LABEL.'* '$DONE_DIR/'"
            ) > /dev/null
            (tsp -D "$idnum" -L "$LABEL.add-to-completed" \
                bash -c \
                "echo -e '$LABEL\t$URL' >> '$COMPLETED'"
            ) > /dev/null
            (tsp -D "$idnum" -L "$LABEL.notification" \
                notify-send \
                "Download completed" \
                "'$LABEL' download successfully completed!"
            ) > /dev/null

            echo "Enqueued '$LABEL' ($URL) operations"
        done

        rm -f "$LOCK"
        tsk -K
        trap - INT TERM EXIT
    else
        echo "There's a daemon instance of ytq running already."
    fi
}

case "$1" in
    daemon) shift; daemon "$@" ;;
    add) shift; add "$@" ;;
    reset) reset ;;
    status) shift; status "$@" ;;
    logs) shift; logs "$@" ;;
    tsp) shift; tsp "$@" ;;
    *) usage "Unknown command '$1'"; exit -1 ;;
esac
