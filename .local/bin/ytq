#!/bin/bash

## usage: ytq <command> [<args>]
##
## commands:
##   daemon     Starts the daemon. It consumes queue requests and schedules
##              tasks to download files.
##   add        Adds an URL to the download queue.

# function:
# + queue remove?
# + queue status
#
# general stuff:
# + notifications
# + specify only audio/both video and audio

# TODO: notify errors when download fails

set -o errexit

# TODO: make it configurable
DL_DIR="/ext/media/ytq"
PROGRESS_DIR="$DL_DIR/progress"
DONE_DIR="$DL_DIR/done"
LOCK="$DL_DIR/daemon.lock"

# uses its own socket to not mess up other task queues.
export TS_SOCKET="/var/tmp/ytq.tsp.sock"
export TS_SLOTS=2

usage() {
    if [[ -n "$1" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)\n"
    fi
    sed -E -ne 's/^## ?(.*)/\1/p' $0
}

error() {
    echo -e "$(tput setaf 1)$1$(tput sgr0)"
    exit -1
}

createifinexistent() {
    local file="$1"
    if [[ ! -e "$file" ]]; then
        echo "Creating '$file'"
        touch "$file"
    fi
}

# TODO: move conditional creation to top
mkdir -p "$DL_DIR" "$PROGRESS_DIR" "$DONE_DIR"

PENDING="$DL_DIR/pending.dls"; createifinexistent "$PENDING"
COMPLETED="$DL_DIR/completed.dls"; createifinexistent "$COMPLETED"

records() {
    local FILES=""
    local COL=""
    local GREP=""
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -c|--completed) FILES="$COMPLETED $FILES" ;;
            -p|--pending)   FILES="$PENDING $FILES" ;;
            -l|--labels)    COL=1 ;;
            -u|--urls)      COL=2 ;;
            -f|--fmts)      COL=3 ;;
            -g|--grep)      shift; GREP="$1\n" ;;
            *)              error "Unknown argument '$1'" ;;
        esac
        shift
    done
    if [[ -z "$FILES" ]]; then
        FILES="$COMPLETED $PENDING"  # defaults to all
    fi
    if [[ -z "$COL" ]]; then
        COL=1-  # defaults to all fields
    fi
    cut -d$'\t' -f$COL $FILES | grep -F "$(printf "$GREP")"
}

add() {
    local LABEL="$1"
    local URL="$2"
    local FMT="audio/video"

    if [[ -z "$LABEL" ]]; then
        usage "Label cannot be empty"; exit -1
    elif [[ -z "$URL" ]]; then
        usage "URL cannot be empty"; exit -1
    elif grep -q $'\t' <(echo "$LABEL"); then
       error "Label cannot contain tabs"
    elif grep -q "^$LABEL$" <(records -c -p --labels); then
        error "Label '$LABEL' was used already"
    elif grep -q "^$URL$" <(records -c --urls); then
        error "'$URL' URL was downloaded already"
    elif grep -q "^$URL$" <(records -p --urls); then
        error "'$URL' URL was queued already"
    else
        # TODO: parse only audio option
        echo -e "$LABEL\t$URL\t$FMT" >> "$PENDING"
        echo "Added '$LABEL' $FMT download to pending queue. ($URL)"
        exit 0
    fi
    error "Unreachable"
}

reset() {
    cat "$COMPLETED" >> "$PENDING"
    echo -n > "$COMPLETED"
}

clear() {
    echo -n > "$PENDING"
    echo -n > "$COMPLETED"
}

# TODO: fail if daemon is not running, or if download has not yet started.
logs() {
    local LABEL="$1"
    if [[ -z "$LABEL" ]]; then
        usage "Label is required"; exit -1
    elif ! grep -q "$LABEL" <(tasks "running"); then
        error "No tasks associated with label '$LABEL' are running"
    fi
    OUTFILE="$(tsp -o "$LABEL.download")"
    tail -n+1 -f "$OUTFILE"
}

tasks() {
    STATUS=$1
    tsp | awk "\$2==\"$STATUS\"{print}" \
        | sed -nE "s:.*\[(.*)\..*\].*:\1:pg" \
        | sort -u
}

list() {
    # this is really ugly, but will do for now. not an awk wiz D:
    # TODO: signal failed entries.
    # TODO: signal the ones in progress (if multiple).

    column -t \
        <(echo -e "STATUS\tLABEL\tURL\tFORMAT") \
        <(awk -F'\t' '!_[$2]++' \
            <(awk '{print "running\t" $0}' <(records -g "$(tasks "running")")) \
            <(awk '{print "completed\t" $0}' "$COMPLETED") \
            <(awk '{print "pending\t" $0}' "$PENDING") \
            | awk -F'\t' '{printf $0; if(!$4) print "\taudio/video"; printf "\n"}'
        )
}

daemon() {
    if [[ "$#" -ne 0 ]]; then
        usage "Daemon takes no arguments"; exit -1
    fi

    if (set -o noclobber; echo "$$" > "$LOCK") 2> /dev/null; then
        trap "rm -f '$LOCK'; tsp -K; exit $?" INT TERM EXIT

        # initially updates pending to discard completed.
        comm -23 <(sort "$PENDING") <(sort "$COMPLETED") | sponge "$PENDING"

        echo "Starting daemon..."
        tail -f "$PENDING" \
        | while read LABEL URL FMT; do
            FLAGS=""
            if [[ "$FMT" = "audio" ]]; then
                FLAGS="--extract-audio $FLAGS"
            fi

            # TODO: remove failed from pending.
            notify-send "Queueing video" "Queueing '$LABEL' video download..."
            # TODO: PUZZLE: how to get status from completed/pending when
            # queueing a playlist.
            # idnum="$(tsp -L "$LABEL.metadata" \
            #     youtube-dl \
            #     --output "$DL_DIR/metadata/$LABEL.$URL" \
            #     --write-info-json \
            #     --write-annotations \
            #     --skip-download \
            #     $URL
            # )"
            idnum="$(tsp -L "$LABEL.download" youtube-dl \
                --add-metadata \
                --ignore-errors \
                --continue \
                --output "$PROGRESS_DIR/$LABEL.%(title)s.%(ext)s" \
                $FLAGS \
                "$URL" \
            )"
            (tsp -D "$idnum" -L "$LABEL.move-done" \
                bash -c \
                "mv '$PROGRESS_DIR/$LABEL.'* '$DONE_DIR/'" \
            ) > /dev/null
            (tsp -D "$idnum" -L "$LABEL.add-to-completed" \
                bash -c \
                "echo -e '$LABEL\t$URL' >> '$COMPLETED'" \
            ) > /dev/null
            (tsp -D "$idnum" -L "$LABEL.notification" \
                notify-send \
                "Download completed" \
                "'$LABEL' download successfully completed!" \
            ) > /dev/null

            echo "Enqueued '$LABEL' ($URL) operations"
        done

        rm -f "$LOCK"
        tsp -K
        trap - INT TERM EXIT
    else
        echo "There's a daemon instance of ytq running already."
    fi
}

case "$1" in
    daemon|add|reset|clear|status|logs|tsp|records|list|tasks)
        CMD="$1"; shift; "$CMD" "$@" ;;
    *)
        usage "Unknown command '$1'"; exit -1 ;;
esac
